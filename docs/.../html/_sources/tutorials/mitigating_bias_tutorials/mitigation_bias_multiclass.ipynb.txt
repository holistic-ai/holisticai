{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Mitigating Bias in multiclass classification**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sys path\n",
    "import sys\n",
    "sys.path = ['../../']+sys.path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from holisticai.bias.metrics import multiclass_bias_metrics\n",
    "from holisticai.pipeline import Pipeline\n",
    "from holisticai.utils.transformers.bias import SensitiveGroups\n",
    "from tests.testing_utils._tests_data_utils import load_preprocessed_us_crime\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data , test_data = load_preprocessed_us_crime(nb_classes=5)\n",
    "_, _, group_a, group_b = train_data\n",
    "sensgroup = SensitiveGroups()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Cristian\\anaconda3\\envs\\metrics\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Metric</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Statistical Parity</th>\n",
       "      <td>0.612385</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Statistical Parity</th>\n",
       "      <td>0.612385</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Equality of Opportunity</th>\n",
       "      <td>0.385094</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Average Odds</th>\n",
       "      <td>0.326640</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass True Positive Difference</th>\n",
       "      <td>0.235136</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Equality of Opportunity</th>\n",
       "      <td>0.385094</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Average Odds</th>\n",
       "      <td>0.326640</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass True Positive Difference</th>\n",
       "      <td>0.235136</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Value  Reference\n",
       "Metric                                                       \n",
       "Max Multiclass Statistical Parity         0.612385          0\n",
       "Mean Multiclass Statistical Parity        0.612385          0\n",
       "Max Multiclass Equality of Opportunity    0.385094          0\n",
       "Max Multiclass Average Odds               0.326640          0\n",
       "Max Multiclass True Positive Difference   0.235136          0\n",
       "Mean Multiclass Equality of Opportunity   0.385094          0\n",
       "Mean Multiclass Average Odds              0.326640          0\n",
       "Mean Multiclass True Positive Difference  0.235136          0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline = Pipeline(\n",
    "    steps=[\n",
    "        ('scalar', StandardScaler()),\n",
    "        (\"model\", LogisticRegression()),\n",
    "    ]\n",
    ")\n",
    "\n",
    "X, y, group_a, group_b = train_data\n",
    "\n",
    "pipeline.fit(X, y)\n",
    "\n",
    "X, y, group_a, group_b = test_data\n",
    "\n",
    "y_pred = pipeline.predict(X)\n",
    "\n",
    "p_attr = sensgroup.fit_transform(np.stack([group_a,group_b], axis=1), convert_numeric=True)\n",
    "\n",
    "df = multiclass_bias_metrics(\n",
    "    p_attr,\n",
    "    y_pred,\n",
    "    y,\n",
    "    metric_type='both'\n",
    ")\n",
    "y_baseline = y_pred.copy()\n",
    "df_baseline=df.copy()\n",
    "df_baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ML Debiaser"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Cristian\\anaconda3\\envs\\metrics\\lib\\site-packages\\tqdm\\auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n",
      "c:\\Users\\Cristian\\anaconda3\\envs\\metrics\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[elapsed time: 00:00:14 | iter:5/5 | primal_residual::10.8485 | dual_residual::0.0471]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Metric</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Statistical Parity</th>\n",
       "      <td>0.333202</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Statistical Parity</th>\n",
       "      <td>0.333202</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Equality of Opportunity</th>\n",
       "      <td>0.191940</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Average Odds</th>\n",
       "      <td>0.061833</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass True Positive Difference</th>\n",
       "      <td>0.109597</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Equality of Opportunity</th>\n",
       "      <td>0.191940</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Average Odds</th>\n",
       "      <td>0.061833</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass True Positive Difference</th>\n",
       "      <td>0.109597</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Value  Reference\n",
       "Metric                                                       \n",
       "Max Multiclass Statistical Parity         0.333202          0\n",
       "Mean Multiclass Statistical Parity        0.333202          0\n",
       "Max Multiclass Equality of Opportunity    0.191940          0\n",
       "Max Multiclass Average Odds               0.061833          0\n",
       "Max Multiclass True Positive Difference   0.109597          0\n",
       "Mean Multiclass Equality of Opportunity   0.191940          0\n",
       "Mean Multiclass Average Odds              0.061833          0\n",
       "Mean Multiclass True Positive Difference  0.109597          0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from holisticai.bias.mitigation import MLDebiaser\n",
    "np.random.seed(10)\n",
    "\n",
    "pipeline = Pipeline(\n",
    "    steps=[\n",
    "        ('scalar', StandardScaler()),\n",
    "        (\"model\", LogisticRegression()),\n",
    "        (\"bm_postprocessing\", MLDebiaser(sgd_steps=10_000,\n",
    "                       full_gradient_epochs=500, \n",
    "                       max_iter=5)),\n",
    "    ]\n",
    ")\n",
    "\n",
    "X, y, group_a, group_b = train_data\n",
    "fit_params = {\n",
    "    \"bm__group_a\": group_a, \n",
    "    \"bm__group_b\": group_b\n",
    "}\n",
    "\n",
    "pipeline.fit(X, y, **fit_params)\n",
    "\n",
    "X, y, group_a, group_b = test_data\n",
    "predict_params = {\n",
    "    \"bm__group_a\": group_a,\n",
    "    \"bm__group_b\": group_b,\n",
    "}\n",
    "y_pred = pipeline.predict(X, **predict_params)\n",
    "\n",
    "p_attr = sensgroup.transform(np.stack([group_a,group_b], axis=1), convert_numeric=True)\n",
    "\n",
    "df = multiclass_bias_metrics(\n",
    "    p_attr,\n",
    "    y_pred,\n",
    "    y,\n",
    "    metric_type='both'\n",
    ")\n",
    "y_mldebiaser  = y_pred.copy()\n",
    "df_mldebiaser = df.copy()\n",
    "df_mldebiaser"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reweighing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Cristian\\anaconda3\\envs\\metrics\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Metric</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Statistical Parity</th>\n",
       "      <td>0.588142</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Statistical Parity</th>\n",
       "      <td>0.588142</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Equality of Opportunity</th>\n",
       "      <td>0.339266</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Average Odds</th>\n",
       "      <td>0.302325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass True Positive Difference</th>\n",
       "      <td>0.240514</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Equality of Opportunity</th>\n",
       "      <td>0.339266</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Average Odds</th>\n",
       "      <td>0.302325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass True Positive Difference</th>\n",
       "      <td>0.240514</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Value  Reference\n",
       "Metric                                                       \n",
       "Max Multiclass Statistical Parity         0.588142          0\n",
       "Mean Multiclass Statistical Parity        0.588142          0\n",
       "Max Multiclass Equality of Opportunity    0.339266          0\n",
       "Max Multiclass Average Odds               0.302325          0\n",
       "Max Multiclass True Positive Difference   0.240514          0\n",
       "Mean Multiclass Equality of Opportunity   0.339266          0\n",
       "Mean Multiclass Average Odds              0.302325          0\n",
       "Mean Multiclass True Positive Difference  0.240514          0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from holisticai.bias.mitigation import Reweighing\n",
    "np.random.seed(10)\n",
    "\n",
    "pipeline = Pipeline(\n",
    "    steps=[\n",
    "        ('scalar', StandardScaler()),\n",
    "        (\"bm_preprocessing\", Reweighing()),\n",
    "        (\"model\", LogisticRegression()),\n",
    "    ]\n",
    ")\n",
    "\n",
    "X, y, group_a, group_b = train_data\n",
    "fit_params = {\n",
    "    \"bm__group_a\": group_a, \n",
    "    \"bm__group_b\": group_b\n",
    "}\n",
    "\n",
    "pipeline.fit(X, y, **fit_params)\n",
    "\n",
    "X, y, group_a, group_b = test_data\n",
    "predict_params = {\n",
    "    \"bm__group_a\": group_a,\n",
    "    \"bm__group_b\": group_b,\n",
    "}\n",
    "y_pred = pipeline.predict(X, **predict_params)\n",
    "\n",
    "p_attr = sensgroup.transform(np.stack([group_a,group_b], axis=1), convert_numeric=True)\n",
    "\n",
    "df = multiclass_bias_metrics(\n",
    "    p_attr,\n",
    "    y_pred,\n",
    "    y,\n",
    "    metric_type='both'\n",
    ")\n",
    "y_rw  = y_pred.copy()\n",
    "df_rw = df.copy()\n",
    "df_rw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Cristian\\anaconda3\\envs\\metrics\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Metric</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Statistical Parity</th>\n",
       "      <td>0.474045</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Statistical Parity</th>\n",
       "      <td>0.474045</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Equality of Opportunity</th>\n",
       "      <td>0.287799</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Average Odds</th>\n",
       "      <td>0.156795</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass True Positive Difference</th>\n",
       "      <td>0.180078</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Equality of Opportunity</th>\n",
       "      <td>0.287799</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Average Odds</th>\n",
       "      <td>0.156795</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass True Positive Difference</th>\n",
       "      <td>0.180078</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Value  Reference\n",
       "Metric                                                       \n",
       "Max Multiclass Statistical Parity         0.474045          0\n",
       "Mean Multiclass Statistical Parity        0.474045          0\n",
       "Max Multiclass Equality of Opportunity    0.287799          0\n",
       "Max Multiclass Average Odds               0.156795          0\n",
       "Max Multiclass True Positive Difference   0.180078          0\n",
       "Mean Multiclass Equality of Opportunity   0.287799          0\n",
       "Mean Multiclass Average Odds              0.156795          0\n",
       "Mean Multiclass True Positive Difference  0.180078          0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from holisticai.bias.mitigation import CorrelationRemover\n",
    "\n",
    "pipeline = Pipeline(\n",
    "    steps=[\n",
    "        ('scalar', StandardScaler()),\n",
    "        (\"bm_preprocessing\", CorrelationRemover()),\n",
    "        (\"model\", LogisticRegression()),\n",
    "    ]\n",
    ")\n",
    "\n",
    "X, y, group_a, group_b = train_data\n",
    "fit_params = {\n",
    "    \"bm__group_a\": group_a, \n",
    "    \"bm__group_b\": group_b\n",
    "}\n",
    "\n",
    "pipeline.fit(X, y, **fit_params)\n",
    "\n",
    "X, y, group_a, group_b = test_data\n",
    "predict_params = {\n",
    "    \"bm__group_a\": group_a,\n",
    "    \"bm__group_b\": group_b,\n",
    "}\n",
    "y_pred = pipeline.predict(X, **predict_params)\n",
    "\n",
    "p_attr = sensgroup.transform(np.stack([group_a,group_b], axis=1), convert_numeric=True)\n",
    "\n",
    "df = multiclass_bias_metrics(\n",
    "    p_attr,\n",
    "    y_pred,\n",
    "    y,\n",
    "    metric_type='both'\n",
    ")\n",
    "y_cr  = y_pred.copy()\n",
    "df_cr = df.copy()\n",
    "df_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Baseline</th>\n",
       "      <th>Reweighing</th>\n",
       "      <th>Correlation Remover</th>\n",
       "      <th>ML Debiaser</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Metric</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Statistical Parity</th>\n",
       "      <td>0.612385</td>\n",
       "      <td>0.588142</td>\n",
       "      <td>0.474045</td>\n",
       "      <td>0.333202</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Statistical Parity</th>\n",
       "      <td>0.612385</td>\n",
       "      <td>0.588142</td>\n",
       "      <td>0.474045</td>\n",
       "      <td>0.333202</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Equality of Opportunity</th>\n",
       "      <td>0.385094</td>\n",
       "      <td>0.339266</td>\n",
       "      <td>0.287799</td>\n",
       "      <td>0.191940</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass Average Odds</th>\n",
       "      <td>0.326640</td>\n",
       "      <td>0.302325</td>\n",
       "      <td>0.156795</td>\n",
       "      <td>0.061833</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max Multiclass True Positive Difference</th>\n",
       "      <td>0.235136</td>\n",
       "      <td>0.240514</td>\n",
       "      <td>0.180078</td>\n",
       "      <td>0.109597</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Equality of Opportunity</th>\n",
       "      <td>0.385094</td>\n",
       "      <td>0.339266</td>\n",
       "      <td>0.287799</td>\n",
       "      <td>0.191940</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass Average Odds</th>\n",
       "      <td>0.326640</td>\n",
       "      <td>0.302325</td>\n",
       "      <td>0.156795</td>\n",
       "      <td>0.061833</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean Multiclass True Positive Difference</th>\n",
       "      <td>0.235136</td>\n",
       "      <td>0.240514</td>\n",
       "      <td>0.180078</td>\n",
       "      <td>0.109597</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Baseline  Reweighing  \\\n",
       "Metric                                                           \n",
       "Max Multiclass Statistical Parity         0.612385    0.588142   \n",
       "Mean Multiclass Statistical Parity        0.612385    0.588142   \n",
       "Max Multiclass Equality of Opportunity    0.385094    0.339266   \n",
       "Max Multiclass Average Odds               0.326640    0.302325   \n",
       "Max Multiclass True Positive Difference   0.235136    0.240514   \n",
       "Mean Multiclass Equality of Opportunity   0.385094    0.339266   \n",
       "Mean Multiclass Average Odds              0.326640    0.302325   \n",
       "Mean Multiclass True Positive Difference  0.235136    0.240514   \n",
       "\n",
       "                                          Correlation Remover  ML Debiaser  \\\n",
       "Metric                                                                       \n",
       "Max Multiclass Statistical Parity                    0.474045     0.333202   \n",
       "Mean Multiclass Statistical Parity                   0.474045     0.333202   \n",
       "Max Multiclass Equality of Opportunity               0.287799     0.191940   \n",
       "Max Multiclass Average Odds                          0.156795     0.061833   \n",
       "Max Multiclass True Positive Difference              0.180078     0.109597   \n",
       "Mean Multiclass Equality of Opportunity              0.287799     0.191940   \n",
       "Mean Multiclass Average Odds                         0.156795     0.061833   \n",
       "Mean Multiclass True Positive Difference             0.180078     0.109597   \n",
       "\n",
       "                                          Reference  \n",
       "Metric                                               \n",
       "Max Multiclass Statistical Parity                 0  \n",
       "Mean Multiclass Statistical Parity                0  \n",
       "Max Multiclass Equality of Opportunity            0  \n",
       "Max Multiclass Average Odds                       0  \n",
       "Max Multiclass True Positive Difference           0  \n",
       "Mean Multiclass Equality of Opportunity           0  \n",
       "Mean Multiclass Average Odds                      0  \n",
       "Mean Multiclass True Positive Difference          0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = pd.concat([df_baseline, df_rw, df_cr,df_mldebiaser], axis=1).iloc[:, [0,2,4,6,7]]\n",
    "result.columns = ['Baseline','Reweighing','Correlation Remover','ML Debiaser','Reference']\n",
    "result"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.0 ('37python')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "741731a26e7342035280729888e8454f90db802238e65f73db4fbc439e29314c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
